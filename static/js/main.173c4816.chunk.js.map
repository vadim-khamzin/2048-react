{"version":3,"sources":["components/Game/gameLogic.js","components/Game/Game.js","components/Game/index.js","components/App/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["mainAxisMove","matrix","moveType","map","row","_row","concat","length","nullCount","nullRow","Array","fill","fillRow","filteredRow","filter","item","resultRow","i","push","mergeRowValues","randomIntegerInRange","min","max","Math","floor","random","moveValues","keyCode","nextMatrix","directions","mainAxis","crossAxis","newMatrix","includes","indexOf","turnedMatrix","reduce","newRow","pop","turnMatrix","newItem","unshift","shift","turnBackMatrix","crossAxisMove","toString","addRandomValue","add","count","arr","matrixObj","list","el","matrixToList","Object","assign","nullCells","entries","_ref","_ref2","slicedToArray","obj","resultMatrix","values","index","array","splice","arguments","undefined","Game","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","onKeydown","bind","assertThisInitialized","handleKeyDown","addValueToMatrix","window","addEventListener","removeEventListener","nextProps","nextState","react_default","a","createElement","className","key","j","setState","e","Component","App","components_Game","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.173c4816.chunk.js","sourcesContent":["const mergeRowValues = (row) => {\r\n    const filteredRow = row.filter(item => item !== null)\r\n    const resultRow = []\r\n\r\n    let i = 0\r\n    while (i < filteredRow.length) {\r\n        if (filteredRow[i] === filteredRow[i + 1]) {\r\n            resultRow.push( filteredRow[i] + filteredRow[i + 1] )\r\n            i += 2\r\n        } else {\r\n            resultRow.push( filteredRow[i] )\r\n            i++\r\n        }\r\n    }\r\n\r\n    return resultRow\r\n}\r\n\r\nconst fillRow = (_row, moveType) => {\r\n    const row = [].concat(_row)\r\n    if (row.length < 4) {\r\n        const nullCount = 4 - row.length\r\n        const nullRow = Array(nullCount).fill(null)\r\n        return moveType\r\n            ? nullRow.concat(row)\r\n            : row.concat(nullRow)\r\n    }\r\n\r\n    return row\r\n}\r\n\r\nconst mainAxisMove = (matrix, moveType) => matrix.map(row => {\r\n    const mergedRow = mergeRowValues(row)\r\n\r\n    return fillRow(mergedRow, moveType)\r\n})\r\n\r\nconst crossAxisMove = (matrix, moveType) => {\r\n    const turnMatrix = (matrix) => matrix.reduce((newMatrix, row) => {\r\n        const newRow = [].concat(row)\r\n        return newMatrix.map(item => item.concat( newRow.pop() ))\r\n    }, Array(4).fill([]) )\r\n\r\n    const turnedMatrix = turnMatrix(matrix)\r\n    const matrixAfterMove = mainAxisMove(turnedMatrix, moveType)\r\n\r\n    const turnBackMatrix = (matrix) => matrix.reduce((newMatrix, row) => {\r\n        const newRow = [].concat(row)\r\n        return newMatrix.map(item => {\r\n            const newItem = [].concat(item)\r\n            newItem.unshift(newRow.shift())\r\n            return newItem\r\n        })\r\n    }, Array(4).fill([]) )\r\n\r\n    return turnBackMatrix(matrixAfterMove)\r\n}\r\n\r\nconst randomIntegerInRange = (min, max) =>\r\n    Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\nconst shouldRandomValueAdd = (prevMatrix, nextMatrix) =>\r\n    prevMatrix.toString() !== nextMatrix.toString()\r\n\r\nexport const moveValues = (matrix, keyCode) => {\r\n    const directions = {\r\n        mainAxis: [37, 39],\r\n        crossAxis: [38, 40]\r\n    }\r\n\r\n    const newMatrix = (directions.mainAxis.includes(keyCode))\r\n        ? mainAxisMove(matrix, directions.mainAxis.indexOf(keyCode))\r\n        : (directions.crossAxis.includes(keyCode))\r\n            ? crossAxisMove(matrix, directions.crossAxis.indexOf(keyCode))\r\n            : matrix\r\n\r\n    return (shouldRandomValueAdd(matrix, newMatrix))\r\n        ? addRandomValue(newMatrix)\r\n        : newMatrix\r\n}\r\n\r\nexport const addRandomValue = (matrix, count=1) => {\r\n    function add(matrix, count) {\r\n        const matrixToList = (matrix) => matrix.reduce((list, el) => {\r\n            return list.concat(el)\r\n        }, [])\r\n\r\n        const convertArrayToObject = (arr) =>\r\n            Object.assign({}, arr)\r\n\r\n        const matrixObj = convertArrayToObject( matrixToList(matrix) )\r\n\r\n        const nullCells = Object.entries(matrixObj)\r\n            .filter(([key, value]) => value === null)\r\n\r\n        const random = randomIntegerInRange(0, nullCells.length - 1)\r\n        matrixObj[nullCells[random][0]] = 2\r\n\r\n        const objToMatrix = (obj) =>\r\n            Object.values(obj).reduce((matrix, el, index, array) => {\r\n                matrix.push( array.splice(0, 4) )\r\n                return matrix\r\n            }, [])\r\n\r\n        const resultMatrix = objToMatrix(matrixObj)\r\n\r\n        if (count > 1) {\r\n            return add(resultMatrix, count - 1)\r\n        } else {\r\n            return resultMatrix\r\n        }\r\n    }\r\n    return add(matrix, count)\r\n}\r\n","import React, { Component } from 'react'\r\nimport { moveValues, addRandomValue } from './gameLogic'\r\n\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            matrix: Array(4).fill(\r\n                Array(4).fill(null)\r\n            )\r\n        }\r\n\r\n        this.onKeydown = this.onKeydown.bind(this)\r\n        this.handleKeyDown = this.handleKeyDown.bind(this)\r\n        this.addValueToMatrix = this.addValueToMatrix.bind(this)\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.addValueToMatrix(2)\r\n        window.addEventListener('keydown', this.onKeydown)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.onKeydown)\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return nextState.matrix.toString() !== this.state.matrix.toString()\r\n    }\r\n\r\n    render() {\r\n        const { matrix } = this.state\r\n        return (\r\n            <div className=\"game\">\r\n                {\r\n                    matrix.map((row, i) => (\r\n                        <div key={i} className=\"game__row\">\r\n                            { row.map((el, j) => (\r\n                                <span key={j} className=\"game__cell\">\r\n                                    { el !== null ? el : '*' }\r\n                                </span>\r\n                            ))}\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    addValueToMatrix(count=1) {\r\n        const { matrix } = this.state\r\n        this.setState({ matrix: addRandomValue(matrix, count) })\r\n    }\r\n\r\n    onKeydown(e) {\r\n        const keyCodes = [37, 38, 39, 40]\r\n\r\n        if (keyCodes.includes(e.keyCode)) {\r\n            this.handleKeyDown(e.keyCode)\r\n        }\r\n    }\r\n\r\n    handleKeyDown(key) {\r\n        const { matrix } = this.state\r\n        this.setState({ matrix: moveValues(matrix, key) })\r\n    }\r\n}\r\n\r\nexport default Game","import Game from './Game'\r\nimport './Game.scss'\r\n\r\nexport default Game","import App from './App'\r\n\r\nexport default App","import React, { Component } from 'react'\r\nimport Game from '../Game'\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"game\">\r\n                <Game />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}