{"version":3,"sources":["components/Score/Score.js","components/Score/index.js","components/Game/gameLogic.js","components/Game/Game.js","components/Game/index.js","components/App/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Score","_ref","_ref$score","score","react_default","a","createElement","defaultProps","mainAxisMove","matrix","moveType","map","row","_row","concat","length","nullCount","nullRow","Array","fill","fillRow","filteredRow","filter","item","resultRow","i","sum","unshift","push","mergeRowValues","randomIntegerInRange","min","max","Math","floor","random","addRandomValue","add","count","arr","matrixObj","reduce","list","el","matrixToList","Object","assign","nullCells","entries","_ref2","slicedToArray","obj","resultMatrix","values","index","array","splice","arguments","undefined","getNewMatrix","keyCode","addRandomFlag","nextMatrix","directions","mainAxis","crossAxis","newMatrix","includes","indexOf","turnedMatrix","newRow","pop","turnMatrix","newItem","shift","turnBackMatrix","crossAxisMove","toString","Game","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","onKeydown","bind","assertThisInitialized","handleKeyDown","addValueToMatrix","window","addEventListener","removeEventListener","nextProps","nextState","className","key","j","setState","e","_moveValues","moveValues","onScore","Component","App","updateScore","components_Score","components_Game","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOAGMA,EAAQ,SAAAC,GAAiB,IAAAC,EAAAD,EAAdE,aAAc,IAAAD,EAAR,EAAQA,EAC3B,OACIE,EAAAC,EAAAC,cAAA,uCAAWH,IAQnBH,EAAMO,aAAe,CACjBJ,MAAO,GAGIH,ICfAA,EDeAA,SEjBXG,EAAQ,EAkDNK,EAAe,SAACC,EAAQC,GAAT,OAAsBD,EAAOE,IAAI,SAAAC,GAGlD,OAhBY,SAACC,EAAMH,GACnB,IAAME,EAAM,GAAGE,OAAOD,GACtB,GAAID,EAAIG,OAAS,EAAG,CAChB,IAAMC,EAAY,EAAIJ,EAAIG,OACpBE,EAAUC,MAAMF,GAAWG,KAAK,MACtC,OAAOT,EACDO,EAAQH,OAAOF,GACfA,EAAIE,OAAOG,GAGrB,OAAOL,EAMAQ,CAnDY,SAACR,EAAKF,GACzB,IAAMW,EAAcT,EAAIU,OAAO,SAAAC,GAAI,OAAa,OAATA,IACjCC,EAAY,GAElB,GAAId,EAEA,IADA,IAAIe,EAAIJ,EAAYN,OAAS,EACtBU,GAAK,GACR,GAAIJ,EAAYI,KAAOJ,EAAYI,EAAI,GAAI,CACvC,IAAMC,EAAML,EAAYI,GAAKJ,EAAYI,EAAI,GAC7CD,EAAUG,QAAQD,GAClBvB,GAASuB,EACTD,GAAK,OAELD,EAAUG,QAAQN,EAAYI,IAC9BA,SAKR,IADA,IAAIA,EAAI,EACDA,EAAIJ,EAAYN,QACnB,GAAIM,EAAYI,KAAOJ,EAAYI,EAAI,GAAI,CACvC,IAAMC,EAAML,EAAYI,GAAKJ,EAAYI,EAAI,GAC7CD,EAAUI,KAAKF,GACfvB,GAASuB,EACTD,GAAK,OAELD,EAAUI,KAAKP,EAAYI,IAC3BA,IAKZ,OAAOD,EAiBWK,CAAejB,EAAKF,GAEZA,MAwBxBoB,EAAuB,SAACC,EAAKC,GAAN,OACzBC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,GAKrCK,EAAiB,SAAC3B,GA+B3B,OA9BA,SAAS4B,EAAI5B,EAAQ6B,GACjB,IAI8BC,EAGxBC,GAHwBD,EAJT,SAAC9B,GAAD,OAAYA,EAAOgC,OAAO,SAACC,EAAMC,GAClD,OAAOD,EAAK5B,OAAO6B,IACpB,IAKoCC,CAAanC,GAFhDoC,OAAOC,OAAO,GAAIP,IAIhBQ,EAAYF,OAAOG,QAAQR,GAC5BlB,OAAO,SAAArB,GAAA,IAAAgD,EAAAJ,OAAAK,EAAA,EAAAL,CAAA5C,EAAA,UAAAgD,EAAA,GAA4B,OAA5BA,EAAA,KAGZT,EAAUO,EADKjB,EAAqB,EAAGiB,EAAUhC,OAAS,IAC9B,IAAM,EAElC,IAAqBoC,EAMfC,GANeD,EAMYX,EAL7BK,OAAOQ,OAAOF,GAAKV,OAAO,SAAChC,EAAQkC,EAAIW,EAAOC,GAE1C,OADA9C,EAAOmB,KAAK2B,EAAMC,OAAO,EAAG,IACrB/C,GACR,KAIP,OAAI6B,EAAQ,EACDD,EAAIe,EAAcd,EAAQ,GAE1Bc,EAGRf,CAAI5B,EA/BsCgD,UAAA1C,OAAA,QAAA2C,IAAAD,UAAA,GAAAA,UAAA,GAAN,IAkCzCE,EAAe,SAAClD,EAAQmD,EAASC,GACnC,IAtCsCC,EAsChCC,EAAa,CACfC,SAAU,CAAC,GAAI,IACfC,UAAW,CAAC,GAAI,KAGdC,EAAaH,EAAWC,SAASG,SAASP,GAC1CpD,EAAaC,EAAQsD,EAAWC,SAASI,QAAQR,IAChDG,EAAWE,UAAUE,SAASP,GArEnB,SAACnD,EAAQC,GAC3B,IAKM2D,EALa,SAAC5D,GAAD,OAAYA,EAAOgC,OAAO,SAACyB,EAAWtD,GACrD,IAAM0D,EAAS,GAAGxD,OAAOF,GACzB,OAAOsD,EAAUvD,IAAI,SAAAY,GAAI,OAAIA,EAAKT,OAAOwD,EAAOC,UACjDrD,MAAM,GAAGC,KAAK,KAEIqD,CAAW/D,GAYhC,OATuB,SAACA,GAAD,OAAYA,EAAOgC,OAAO,SAACyB,EAAWtD,GACzD,IAAM0D,EAAS,GAAGxD,OAAOF,GACzB,OAAOsD,EAAUvD,IAAI,SAAAY,GACjB,IAAMkD,EAAU,GAAG3D,OAAOS,GAE1B,OADAkD,EAAQ9C,QAAQ2C,EAAOI,SAChBD,KAEZvD,MAAM,GAAGC,KAAK,KAEVwD,CAXiBnE,EAAa6D,EAAc3D,IA+DzCkE,CAAcnE,EAAQsD,EAAWE,UAAUG,QAAQR,IACnDnD,EAEV,OAAQoD,IAjD8BC,EAiDgBI,EAARzD,EAhDnCoE,aAAef,EAAWe,YAiD/BzC,EAAe8B,GACfA,GCnDKY,cA3EX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAnC,OAAAoC,EAAA,EAAApC,CAAAqC,KAAAJ,IACfE,EAAAnC,OAAAsC,EAAA,EAAAtC,CAAAqC,KAAArC,OAAAuC,EAAA,EAAAvC,CAAAiC,GAAAO,KAAAH,KAAMH,KAEDO,MAAQ,CACT7E,OAAQS,MAAM,GAAGC,KACbD,MAAM,GAAGC,KAAK,QAItB6D,EAAKO,UAAYP,EAAKO,UAAUC,KAAf3C,OAAA4C,EAAA,EAAA5C,QAAA4C,EAAA,EAAA5C,CAAAmC,KACjBA,EAAKU,cAAgBV,EAAKU,cAAcF,KAAnB3C,OAAA4C,EAAA,EAAA5C,QAAA4C,EAAA,EAAA5C,CAAAmC,KACrBA,EAAKW,iBAAmBX,EAAKW,iBAAiBH,KAAtB3C,OAAA4C,EAAA,EAAA5C,QAAA4C,EAAA,EAAA5C,CAAAmC,KAXTA,oFAefE,KAAKS,iBAAiB,GACtBC,OAAOC,iBAAiB,UAAWX,KAAKK,0DAIxCK,OAAOE,oBAAoB,UAAWZ,KAAKK,yDAGzBQ,EAAWC,GAC7B,OAAOA,EAAUvF,OAAOoE,aAAeK,KAAKI,MAAM7E,OAAOoE,4CAGpD,IACGpE,EAAWyE,KAAKI,MAAhB7E,OACR,OACIL,EAAAC,EAAAC,cAAA,OAAK2F,UAAU,QAEPxF,EAAOE,IAAI,SAACC,EAAKa,GAAN,OACPrB,EAAAC,EAAAC,cAAA,OAAK4F,IAAKzE,EAAGwE,UAAU,aAClBrF,EAAID,IAAI,SAACgC,EAAIwD,GAAL,OACL/F,EAAAC,EAAAC,cAAA,QAAM4F,IAAKC,EAAGF,UAAU,cACZ,OAAPtD,EAAcA,EAAK,sDAUxB,IAAXL,EAAWmB,UAAA1C,OAAA,QAAA2C,IAAAD,UAAA,GAAAA,UAAA,GAAH,EACbhD,EAAWyE,KAAKI,MAAhB7E,OACRyE,KAAKkB,SAAS,CAAE3F,OAAQ2B,EAAe3B,EAAQ6B,uCAGzC+D,GACW,CAAC,GAAI,GAAI,GAAI,IAEjBlC,SAASkC,EAAEzC,UACpBsB,KAAKQ,cAAcW,EAAEzC,+CAIfsC,GAAK,IAAAI,EDsEG,SAAC7F,EAAQmD,GAAT,IAAkBC,IAAlBJ,UAAA1C,OAAA,QAAA2C,IAAAD,UAAA,KAAAA,UAAA,SAA4C,CAClES,UAAWP,EAAalD,EAAQmD,EAASC,GACzC1D,SCtEiCoG,CADVrB,KAAKI,MAAhB7E,OACwCyF,GAAxChC,EAFOoC,EAEPpC,UAAW/D,EAFJmG,EAEInG,MAEnB+E,KAAKkB,SAAS,CACV3F,OAAQyD,IAGZgB,KAAKH,MAAMyB,QAAQrG,UApERsG,aCDJ3B,YCDA4B,cCGX,SAAAA,EAAY3B,GAAO,IAAAC,EAAA,OAAAnC,OAAAoC,EAAA,EAAApC,CAAAqC,KAAAwB,IACf1B,EAAAnC,OAAAsC,EAAA,EAAAtC,CAAAqC,KAAArC,OAAAuC,EAAA,EAAAvC,CAAA6D,GAAArB,KAAAH,KAAMH,KAEDO,MAAQ,CACTnF,MAAO,GAGX6E,EAAK2B,YAAc3B,EAAK2B,YAAYnB,KAAjB3C,OAAA4C,EAAA,EAAA5C,QAAA4C,EAAA,EAAA5C,CAAAmC,KAPJA,2EAUP7E,GACR+E,KAAKkB,SAAS,CAAEjG,2CAGX,IACGA,EAAU+E,KAAKI,MAAfnF,MAER,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACsG,EAAD,CAAOzG,MAAOA,IACdC,EAAAC,EAAAC,cAACuG,EAAD,CAAML,QAAStB,KAAKyB,sBArBlBF,aCQEK,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO/G,EAAAC,EAAAC,cAAC8G,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e309a688.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Score = ({ score=0 }) => {\r\n    return (\r\n        <h3>Счёт: {score}</h3>\r\n    )\r\n}\r\n\r\nScore.propTypes = {\r\n    score: PropTypes.number.isRequired\r\n}\r\n\r\nScore.defaultProps = {\r\n    score: 0\r\n}\r\n\r\nexport default Score","import Score from './Score'\r\n\r\nexport default Score","let score = 0\r\n\r\nconst mergeRowValues = (row, moveType) => {\r\n    const filteredRow = row.filter(item => item !== null)\r\n    const resultRow = []\r\n\r\n    if (moveType) {\r\n        let i = filteredRow.length - 1\r\n        while (i >= 0) {\r\n            if (filteredRow[i] === filteredRow[i - 1]) {\r\n                const sum = filteredRow[i] + filteredRow[i - 1]\r\n                resultRow.unshift(sum)\r\n                score += sum\r\n                i -= 2\r\n            } else {\r\n                resultRow.unshift(filteredRow[i])\r\n                i--\r\n            }\r\n        }\r\n    } else {\r\n        let i = 0\r\n        while (i < filteredRow.length) {\r\n            if (filteredRow[i] === filteredRow[i + 1]) {\r\n                const sum = filteredRow[i] + filteredRow[i + 1]\r\n                resultRow.push(sum)\r\n                score += sum\r\n                i += 2\r\n            } else {\r\n                resultRow.push(filteredRow[i])\r\n                i++\r\n            }\r\n        }\r\n    }\r\n\r\n    return resultRow\r\n}\r\n\r\nconst fillRow = (_row, moveType) => {\r\n    const row = [].concat(_row)\r\n    if (row.length < 4) {\r\n        const nullCount = 4 - row.length\r\n        const nullRow = Array(nullCount).fill(null)\r\n        return moveType\r\n            ? nullRow.concat(row)\r\n            : row.concat(nullRow)\r\n    }\r\n\r\n    return row\r\n}\r\n\r\nconst mainAxisMove = (matrix, moveType) => matrix.map(row => {\r\n    const mergedRow = mergeRowValues(row, moveType)\r\n\r\n    return fillRow(mergedRow, moveType)\r\n})\r\n\r\nconst crossAxisMove = (matrix, moveType) => {\r\n    const turnMatrix = (matrix) => matrix.reduce((newMatrix, row) => {\r\n        const newRow = [].concat(row)\r\n        return newMatrix.map(item => item.concat(newRow.pop()))\r\n    }, Array(4).fill([]))\r\n\r\n    const turnedMatrix = turnMatrix(matrix)\r\n    const matrixAfterMove = mainAxisMove(turnedMatrix, moveType)\r\n\r\n    const turnBackMatrix = (matrix) => matrix.reduce((newMatrix, row) => {\r\n        const newRow = [].concat(row)\r\n        return newMatrix.map(item => {\r\n            const newItem = [].concat(item)\r\n            newItem.unshift(newRow.shift())\r\n            return newItem\r\n        })\r\n    }, Array(4).fill([]))\r\n\r\n    return turnBackMatrix(matrixAfterMove)\r\n}\r\n\r\nconst randomIntegerInRange = (min, max) =>\r\n    Math.floor(Math.random() * (max - min + 1)) + min\r\n\r\nconst shouldRandomValueAdd = (prevMatrix, nextMatrix) =>\r\n    prevMatrix.toString() !== nextMatrix.toString()\r\n\r\nexport const addRandomValue = (matrix, count = 1) => {\r\n    function add(matrix, count) {\r\n        const matrixToList = (matrix) => matrix.reduce((list, el) => {\r\n            return list.concat(el)\r\n        }, [])\r\n\r\n        const convertArrayToObject = (arr) =>\r\n            Object.assign({}, arr)\r\n\r\n        const matrixObj = convertArrayToObject(matrixToList(matrix))\r\n\r\n        const nullCells = Object.entries(matrixObj)\r\n            .filter(([key, value]) => value === null)\r\n\r\n        const random = randomIntegerInRange(0, nullCells.length - 1)\r\n        matrixObj[nullCells[random][0]] = 2\r\n\r\n        const objToMatrix = (obj) =>\r\n            Object.values(obj).reduce((matrix, el, index, array) => {\r\n                matrix.push(array.splice(0, 4))\r\n                return matrix\r\n            }, [])\r\n\r\n        const resultMatrix = objToMatrix(matrixObj)\r\n\r\n        if (count > 1) {\r\n            return add(resultMatrix, count - 1)\r\n        } else {\r\n            return resultMatrix\r\n        }\r\n    }\r\n    return add(matrix, count)\r\n}\r\n\r\nconst getNewMatrix = (matrix, keyCode, addRandomFlag) => {\r\n    const directions = {\r\n        mainAxis: [37, 39],\r\n        crossAxis: [38, 40]\r\n    }\r\n\r\n    const newMatrix = (directions.mainAxis.includes(keyCode))\r\n        ? mainAxisMove(matrix, directions.mainAxis.indexOf(keyCode))\r\n        : (directions.crossAxis.includes(keyCode))\r\n            ? crossAxisMove(matrix, directions.crossAxis.indexOf(keyCode))\r\n            : matrix\r\n\r\n    return (addRandomFlag && shouldRandomValueAdd(matrix, newMatrix))\r\n        ? addRandomValue(newMatrix)\r\n        : newMatrix\r\n}\r\n\r\nexport const moveValues = (matrix, keyCode, addRandomFlag = true) => ({\r\n    newMatrix: getNewMatrix(matrix, keyCode, addRandomFlag),\r\n    score\r\n})\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { moveValues, addRandomValue } from './gameLogic'\r\n\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            matrix: Array(4).fill(\r\n                Array(4).fill(null)\r\n            )\r\n        }\r\n\r\n        this.onKeydown = this.onKeydown.bind(this)\r\n        this.handleKeyDown = this.handleKeyDown.bind(this)\r\n        this.addValueToMatrix = this.addValueToMatrix.bind(this)\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.addValueToMatrix(2)\r\n        window.addEventListener('keydown', this.onKeydown)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown', this.onKeydown)\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return nextState.matrix.toString() !== this.state.matrix.toString()\r\n    }\r\n\r\n    render() {\r\n        const { matrix } = this.state\r\n        return (\r\n            <div className=\"game\">\r\n                {\r\n                    matrix.map((row, i) => (\r\n                        <div key={i} className=\"game__row\">\r\n                            {row.map((el, j) => (\r\n                                <span key={j} className=\"game__cell\">\r\n                                    {el !== null ? el : '*'}\r\n                                </span>\r\n                            ))}\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    addValueToMatrix(count = 1) {\r\n        const { matrix } = this.state\r\n        this.setState({ matrix: addRandomValue(matrix, count) })\r\n    }\r\n\r\n    onKeydown(e) {\r\n        const keyCodes = [37, 38, 39, 40]\r\n\r\n        if (keyCodes.includes(e.keyCode)) {\r\n            this.handleKeyDown(e.keyCode)\r\n        }\r\n    }\r\n\r\n    handleKeyDown(key) {\r\n        const { matrix } = this.state\r\n        const { newMatrix, score } = moveValues(matrix, key)\r\n\r\n        this.setState({\r\n            matrix: newMatrix\r\n        })\r\n\r\n        this.props.onScore(score)\r\n    }\r\n}\r\n\r\nGame.propTypes = {\r\n    onScore: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Game","import Game from './Game'\r\nimport './Game.scss'\r\n\r\nexport default Game","import App from './App'\r\n\r\nexport default App","import React, { Component } from 'react'\r\nimport Score from '../Score'\r\nimport Game from '../Game'\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            score: 0\r\n        }\r\n\r\n        this.updateScore = this.updateScore.bind(this)\r\n    }\r\n\r\n    updateScore(score) {\r\n        this.setState({ score })\r\n    }\r\n\r\n    render() {\r\n        const { score } = this.state\r\n\r\n        return (\r\n            <div>\r\n                <Score score={score} />\r\n                <Game onScore={this.updateScore} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}